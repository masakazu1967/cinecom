name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  # Determine deployment environment and configuration
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      should_deploy: ${{ steps.setup.outputs.should_deploy }}
    
    steps:
      - name: Determine deployment configuration
        id: setup
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ refs/tags/v.* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build and push Docker images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix=sha-

      - name: Extract metadata for Backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix=sha-

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup, build-and-push]
    if: needs.setup.outputs.should_deploy == 'true' && needs.setup.outputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy Backend to Render
        run: |
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_STAGING }}/deploys

      - name: Run Database Migrations
        run: |
          # Add database migration logic here
          echo "Running database migrations for staging..."

      - name: Health Check
        run: |
          echo "Performing health checks..."
          # Add health check logic
          sleep 60  # Wait for deployment to be ready
          curl -f ${{ secrets.STAGING_FRONTEND_URL }}/api/health || exit 1
          curl -f ${{ secrets.STAGING_BACKEND_URL }}/health || exit 1

      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test logic

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, build-and-push]
    if: needs.setup.outputs.should_deploy == 'true' && needs.setup.outputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy Frontend to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy Backend to Render Production
        run: |
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_PRODUCTION }}/deploys

      - name: Run Database Migrations
        run: |
          echo "Running database migrations for production..."
          # Add production migration logic with safety checks

      - name: Health Check
        run: |
          echo "Performing health checks..."
          sleep 120  # Wait for deployment to be ready
          curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }}/api/health || exit 1
          curl -f ${{ secrets.PRODUCTION_BACKEND_URL }}/health || exit 1

      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests on production..."
          # Add production smoke test logic

  # Post-deployment notifications and monitoring
  post-deployment:
    name: Post Deployment
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging, deploy-production]
    if: always() && needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: Deployment Success Notification
        if: success()
        run: |
          echo "✅ Deployment to ${{ needs.setup.outputs.environment }} completed successfully!"
          
      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "❌ Deployment to ${{ needs.setup.outputs.environment }} failed!"
          # Add notification logic (Slack, Discord, etc.)

      - name: Update Deployment Status
        if: always()
        run: |
          echo "Updating deployment status..."
          # Add deployment tracking logic

  # Rollback workflow (can be triggered manually)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback == 'true'
    
    steps:
      - name: Rollback Frontend
        run: |
          echo "Rolling back frontend deployment..."
          # Add rollback logic

      - name: Rollback Backend
        run: |
          echo "Rolling back backend deployment..."
          # Add rollback logic

      - name: Rollback Database
        run: |
          echo "Rolling back database changes if needed..."
          # Add database rollback logic

      - name: Verify Rollback
        run: |
          echo "Verifying rollback success..."
          # Add verification logic