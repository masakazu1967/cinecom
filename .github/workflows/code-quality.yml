name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  # ESLint and Prettier checks
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [frontend, backend]
    
    defaults:
      run:
        working-directory: ./${{ matrix.workspace }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint --format=@microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./${{ matrix.workspace }}/eslint-results.sarif
          wait-for-processing: true

      - name: Run Prettier check
        run: pnpm run format:check

  # TypeScript type checking
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [frontend, backend]
    
    defaults:
      run:
        working-directory: ./${{ matrix.workspace }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

  # Dependency audit
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [frontend, backend]
    
    defaults:
      run:
        working-directory: ./${{ matrix.workspace }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Run security audit
        run: pnpm audit --audit-level high
        continue-on-error: true

      - name: Check for outdated dependencies
        run: pnpm outdated
        continue-on-error: true

  # Code complexity and maintainability
  code-metrics:
    name: Code Metrics
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install code analysis tools
        run: |
          npm install -g typescript-complexity-metrics
          npm install -g jscpd
          npm install -g dependency-cruiser

      - name: Analyze code complexity
        run: |
          echo "Analyzing TypeScript complexity..."
          find frontend backend -name "*.ts" -o -name "*.tsx" | head -20 | xargs -I {} ts-complexity {} || true

      - name: Check for code duplication
        run: |
          echo "Checking for code duplication..."
          jscpd frontend backend --formats typescript,tsx --threshold 3 --output ./jscpd-report || true

      - name: Analyze dependencies
        run: |
          echo "Analyzing frontend dependencies..."
          cd frontend && depcruise --output-type text src/ || true
          echo "Analyzing backend dependencies..."
          cd backend && depcruise --output-type text src/ || true

      - name: Upload code metrics
        uses: actions/upload-artifact@v3
        with:
          name: code-metrics
          path: |
            jscpd-report/
          retention-days: 7

  # Bundle size analysis (for frontend)
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'frontend/')
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: pnpm run build

      - name: Analyze bundle size
        uses: nextjs-bundle-analysis/bundle-analysis-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow-id: code-quality.yml

  # Accessibility testing
  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'frontend/')
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Start application
        run: pnpm run start &
        env:
          PORT: 3000

      - name: Wait for application to be ready
        run: |
          timeout 60s bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'

      - name: Run accessibility tests
        run: |
          npm install -g @axe-core/cli
          axe http://localhost:3000 --tags wcag2a,wcag2aa --exit

  # Performance testing
  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'frontend/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Build and start application
        working-directory: ./frontend
        run: |
          pnpm run build
          pnpm run start &
        env:
          PORT: 3000

      - name: Wait for application
        run: |
          timeout 60s bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/movies
          configPath: './frontend/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Security code scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript

  # Generate quality report
  quality-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, dependency-audit, code-metrics]
    if: always()
    
    steps:
      - name: Quality Check Summary
        run: |
          echo "## üìä Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint-and-format.result }}" == "success" ]]; then
            echo "‚úÖ **Lint & Format**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Lint & Format**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.type-check.result }}" == "success" ]]; then
            echo "‚úÖ **Type Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Type Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.dependency-audit.result }}" == "success" ]]; then
            echo "‚úÖ **Dependency Audit**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Dependency Audit**: Issues Found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.code-metrics.result }}" == "success" ]]; then
            echo "‚úÖ **Code Metrics**: Analyzed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Code Metrics**: Analysis Issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in the individual job logs above." >> $GITHUB_STEP_SUMMARY