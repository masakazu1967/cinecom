name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # 変更検出（GitHub Free プラン節約のため）
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  # フロントエンドCI（条件付き実行）
  frontend-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check
        continue-on-error: true

      - name: Lint
        run: npm run lint
        continue-on-error: true

      - name: Build
        run: npm run build

      - name: Unit tests
        run: npm run test -- --watchAll=false --coverage
        continue-on-error: true

  # バックエンドCI（統合サービス・条件付き実行）
  backend-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: cinecom_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Type check & Build
        run: npm run build
        continue-on-error: true

      - name: Lint
        run: npm run lint
        continue-on-error: true

      - name: Unit tests
        run: npm run test
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/cinecom_test
          NODE_ENV: test

  # セキュリティスキャン（軽量版）
  security-scan:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.frontend == 'true' ||
      needs.detect-changes.outputs.backend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit frontend dependencies
        if: needs.detect-changes.outputs.frontend == 'true'
        run: |
          cd frontend
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Audit backend dependencies
        if: needs.detect-changes.outputs.backend == 'true'
        run: |
          cd backend
          npm audit --audit-level=moderate
        continue-on-error: true

  # SonarCloud分析（パブリックリポジトリ無料プラン）
  sonarcloud:
    needs: [frontend-ci, backend-ci]
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.frontend-ci.result == 'success' || needs.frontend-ci.result == 'skipped') &&
      (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # デプロイ（mainブランチのみ）
  deploy:
    needs: [frontend-ci, backend-ci, security-scan]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      (needs.frontend-ci.result == 'success' || needs.frontend-ci.result == 'skipped') &&
      (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped') &&
      needs.security-scan.result == 'success'
    
    steps:
      - name: Deploy notification
        run: |
          echo "🚀 Deploying to production..."
          echo "Frontend: Vercel auto-deploy from main branch"
          echo "Backend: Render auto-deploy from main branch"
          echo "All services will be automatically deployed"

  # 結果通知
  notify:
    needs: [frontend-ci, backend-ci, security-scan, sonarcloud, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Success notification
        if: success()
        run: |
          echo "✅ CI/CD pipeline completed successfully!"
          
      - name: Failure notification
        if: failure()
        run: |
          echo "❌ CI/CD pipeline failed. Check the logs above."
          echo "Note: Some steps use continue-on-error for non-critical checks."