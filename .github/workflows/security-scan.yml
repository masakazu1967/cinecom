# „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥ - Âü∫Êú¨„ÉªÈ´òÈÄü„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê§úÊüª
name: Security Scan

on:
  push:
    branches: ['main', 'feature/**', 'hotfix/**']
  pull_request:
    branches: ['main']
  schedule:
    # ÊØéÊó•ÂçàÂâç2ÊôÇÔºàJSTÔºâ„Å´ÂÆüË°å
    - cron: '0 17 * * *'

env:
  NODE_VERSION: '22'

jobs:
  # Â§âÊõ¥Ê§úÂá∫
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            config:
              - '.github/workflows/**'
              - 'package.json'
              - '**/package.json'
              - '**/pnpm-lock.yaml'

  # „Ç≥„Éº„Éâ„Çπ„Ç≠„É£„É≥ÔºàCodeQLÔºâ
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.backend == 'true' ||
      needs.detect-changes.outputs.frontend == 'true' ||
      needs.detect-changes.outputs.config == 'true'

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # ‰æùÂ≠òÈñ¢‰øÇËÑÜÂº±ÊÄß„Çπ„Ç≠„É£„É≥
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.backend == 'true' ||
      needs.detect-changes.outputs.frontend == 'true'

    strategy:
      matrix:
        service:
          - { name: 'user-service', path: 'backend/user-service' }
          - { name: 'movie-service', path: 'backend/movie-service' }
          - { name: 'actor-service', path: 'backend/actor-service' }
          - { name: 'scene-service', path: 'backend/scene-service' }
          - { name: 'review-service', path: 'backend/review-service' }
          - { name: 'frontend', path: 'frontend' }

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Check if service exists
        id: check-service
        run: |
          if [ -f "${{ matrix.service.path }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Handle incompatible lockfile and install dependencies
        if: steps.check-service.outputs.exists == 'true'
        run: |
          echo "Attempting to install with frozen lockfile..."
          if ! pnpm install --frozen-lockfile; then
            echo "Frozen lockfile failed, likely due to version incompatibility"
            echo "Regenerating lockfile with current pnpm version $(pnpm --version)..."
            rm -f pnpm-lock.yaml
            pnpm install
            echo "Lockfile regenerated successfully"
          else
            echo "Frozen lockfile installation successful"
          fi

      - name: Run pnpm audit
        if: steps.check-service.outputs.exists == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "üîç Running security audit for ${{ matrix.service.name }}"
          pnpm audit --audit-level=high --json > audit-report.json || true

          # È´ò„ÉªÈáçÂ§ß„É¨„Éô„É´„ÅÆËÑÜÂº±ÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ
          VULNERABILITIES=$(jq -r '.advisories | length' audit-report.json 2>/dev/null || echo "0")

          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $VULNERABILITIES high/critical vulnerabilities in ${{ matrix.service.name }}"
            jq -r '.advisories[] | "- \(.title) (Severity: \(.severity))"' audit-report.json
            echo "::warning::${{ matrix.service.name }} has $VULNERABILITIES high/critical vulnerabilities"
          else
            echo "‚úÖ No high/critical vulnerabilities found in ${{ matrix.service.name }}"
          fi

      - name: Upload audit report
        if: steps.check-service.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: audit-report-${{ matrix.service.name }}
          path: ${{ matrix.service.path }}/audit-report.json
          retention-days: 30

  # „Ç∑„Éº„ÇØ„É¨„ÉÉ„ÉàÊ§úÂá∫
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.backend == 'true' ||
      needs.detect-changes.outputs.frontend == 'true' ||
      needs.detect-changes.outputs.config == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.before }}
          head: HEAD
          extra_args: --debug --only-verified

  # ESLint „Çª„Ç≠„É•„É™„ÉÜ„Ç£
  eslint-security:
    name: ESLint Security Rules
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.backend == 'true' ||
      needs.detect-changes.outputs.frontend == 'true'

    strategy:
      matrix:
        service:
          - { name: 'user-service', path: 'backend/user-service' }
          - { name: 'movie-service', path: 'backend/movie-service' }
          - { name: 'actor-service', path: 'backend/actor-service' }
          - { name: 'scene-service', path: 'backend/scene-service' }
          - { name: 'review-service', path: 'backend/review-service' }
          - { name: 'frontend', path: 'frontend' }

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Check if service exists
        id: check-service
        run: |
          if [ -f "${{ matrix.service.path }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Handle incompatible lockfile and install dependencies
        if: steps.check-service.outputs.exists == 'true'
        run: |
          echo "Attempting to install with frozen lockfile..."
          if ! pnpm install --frozen-lockfile; then
            echo "Frozen lockfile failed, likely due to version incompatibility"
            echo "Regenerating lockfile with current pnpm version $(pnpm --version)..."
            rm -f pnpm-lock.yaml
            pnpm install
            echo "Lockfile regenerated successfully"
          else
            echo "Frozen lockfile installation successful"
          fi

      - name: Run ESLint security rules
        if: steps.check-service.outputs.exists == 'true'
        working-directory: ${{ matrix.service.path }}
        run: |
          echo "üîç Running ESLint security checks for ${{ matrix.service.name }}"

          # „Çª„Ç≠„É•„É™„ÉÜ„Ç£Èñ¢ÈÄ£„ÅÆESLint„É´„Éº„É´„ÇíÂÆüË°å
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ] || [ -f "eslint.config.mjs" ]; then
            pnpm run lint --format=json --output-file=eslint-security-report.json || true

            # „Çª„Ç≠„É•„É™„ÉÜ„Ç£Èñ¢ÈÄ£„ÅÆË≠¶Âëä„Éª„Ç®„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            SECURITY_ISSUES=$(jq '[.[] | select(.messages[].ruleId | test("security|no-eval|no-implied-eval"))] | length' eslint-security-report.json 2>/dev/null || echo "0")

            if [ "$SECURITY_ISSUES" -gt 0 ]; then
              echo "‚ö†Ô∏è Found $SECURITY_ISSUES security-related ESLint issues in ${{ matrix.service.name }}"
              echo "::warning::${{ matrix.service.name }} has $SECURITY_ISSUES security-related ESLint issues"
            else
              echo "‚úÖ No security-related ESLint issues found in ${{ matrix.service.name }}"
            fi
          else
            echo "‚ÑπÔ∏è No ESLint configuration found in ${{ matrix.service.name }}"
          fi

      - name: Upload ESLint security report
        if: steps.check-service.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: eslint-security-${{ matrix.service.name }}
          path: ${{ matrix.service.path }}/eslint-security-report.json
          retention-days: 30

  # Docker „Ç§„É°„Éº„Ç∏„Çπ„Ç≠„É£„É≥
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'

    strategy:
      matrix:
        service: ['user-service', 'movie-service', 'actor-service', 'scene-service', 'review-service']

    steps:
      - uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        id: check-dockerfile
        run: |
          if [ -f "backend/${{ matrix.service }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No Dockerfile found for ${{ matrix.service }}"
          fi

      - name: Build Docker image for scanning
        if: steps.check-dockerfile.outputs.exists == 'true'
        run: |
          docker build -t cinecom/${{ matrix.service }}:scan backend/${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cinecom/${{ matrix.service }}:scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥ÁµêÊûúÈõÜÁ¥Ñ
  security-summary:
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secret-scan, eslint-security, container-scan]
    if: always()

    permissions:
      actions: read
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# üîí „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥ÁµêÊûú„Çµ„Éû„É™„Éº" > security-summary.md
          echo "" >> security-summary.md
          echo "**ÂÆüË°åÊó•ÊôÇ**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
          echo "**„Éñ„É©„É≥„ÉÅ**: ${{ github.ref_name }}" >> security-summary.md
          echo "**„Ç≥„Éü„ÉÉ„Éà**: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md

          # ÂêÑ„Çπ„Ç≠„É£„É≥„ÅÆÁµêÊûú„Çí„ÉÅ„Çß„ÉÉ„ÇØ
          echo "## „Çπ„Ç≠„É£„É≥ÁµêÊûú" >> security-summary.md
          echo "" >> security-summary.md

          # CodeQL
          if [ "${{ needs.codeql-analysis.result }}" = "success" ]; then
            echo "‚úÖ **CodeQLÂàÜÊûê**: ÂÆå‰∫Ü" >> security-summary.md
          elif [ "${{ needs.codeql-analysis.result }}" = "failure" ]; then
            echo "‚ùå **CodeQLÂàÜÊûê**: ËÑÜÂº±ÊÄßÊ§úÂá∫" >> security-summary.md
          else
            echo "‚è≠Ô∏è **CodeQLÂàÜÊûê**: „Çπ„Ç≠„ÉÉ„Éó" >> security-summary.md
          fi

          # ‰æùÂ≠òÈñ¢‰øÇ„Çπ„Ç≠„É£„É≥
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "‚úÖ **‰æùÂ≠òÈñ¢‰øÇ„Çπ„Ç≠„É£„É≥**: ÂÆå‰∫Ü" >> security-summary.md
          elif [ "${{ needs.dependency-scan.result }}" = "failure" ]; then
            echo "‚ùå **‰æùÂ≠òÈñ¢‰øÇ„Çπ„Ç≠„É£„É≥**: ËÑÜÂº±ÊÄßÊ§úÂá∫" >> security-summary.md
          else
            echo "‚è≠Ô∏è **‰æùÂ≠òÈñ¢‰øÇ„Çπ„Ç≠„É£„É≥**: „Çπ„Ç≠„ÉÉ„Éó" >> security-summary.md
          fi

          # „Ç∑„Éº„ÇØ„É¨„ÉÉ„ÉàÊ§úÂá∫
          if [ "${{ needs.secret-scan.result }}" = "success" ]; then
            echo "‚úÖ **„Ç∑„Éº„ÇØ„É¨„ÉÉ„ÉàÊ§úÂá∫**: ÂÆå‰∫Ü" >> security-summary.md
          elif [ "${{ needs.secret-scan.result }}" = "failure" ]; then
            echo "‚ùå **„Ç∑„Éº„ÇØ„É¨„ÉÉ„ÉàÊ§úÂá∫**: Ê©üÂØÜÊÉÖÂ†±Ê§úÂá∫" >> security-summary.md
          else
            echo "‚è≠Ô∏è **„Ç∑„Éº„ÇØ„É¨„ÉÉ„ÉàÊ§úÂá∫**: „Çπ„Ç≠„ÉÉ„Éó" >> security-summary.md
          fi

          # ESLint „Çª„Ç≠„É•„É™„ÉÜ„Ç£
          if [ "${{ needs.eslint-security.result }}" = "success" ]; then
            echo "‚úÖ **ESLint „Çª„Ç≠„É•„É™„ÉÜ„Ç£**: ÂÆå‰∫Ü" >> security-summary.md
          elif [ "${{ needs.eslint-security.result }}" = "failure" ]; then
            echo "‚ùå **ESLint „Çª„Ç≠„É•„É™„ÉÜ„Ç£**: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É´„Éº„É´ÈÅïÂèçÊ§úÂá∫" >> security-summary.md
          else
            echo "‚è≠Ô∏è **ESLint „Çª„Ç≠„É•„É™„ÉÜ„Ç£**: „Çπ„Ç≠„ÉÉ„Éó" >> security-summary.md
          fi

          # „Ç≥„É≥„ÉÜ„Éä„Çπ„Ç≠„É£„É≥
          if [ "${{ needs.container-scan.result }}" = "success" ]; then
            echo "‚úÖ **„Ç≥„É≥„ÉÜ„Éä„Çπ„Ç≠„É£„É≥**: ÂÆå‰∫Ü" >> security-summary.md
          elif [ "${{ needs.container-scan.result }}" = "failure" ]; then
            echo "‚ùå **„Ç≥„É≥„ÉÜ„Éä„Çπ„Ç≠„É£„É≥**: ËÑÜÂº±ÊÄßÊ§úÂá∫" >> security-summary.md
          else
            echo "‚è≠Ô∏è **„Ç≥„É≥„ÉÜ„Éä„Çπ„Ç≠„É£„É≥**: „Çπ„Ç≠„ÉÉ„Éó" >> security-summary.md
          fi

          echo "" >> security-summary.md
          echo "## Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥" >> security-summary.md
          echo "" >> security-summary.md

          # Â§±Êïó„Åó„Åü„Ç∏„Éß„Éñ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÊé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥
          if [ "${{ needs.codeql-analysis.result }}" = "failure" ] ||
             [ "${{ needs.dependency-scan.result }}" = "failure" ] ||
             [ "${{ needs.secret-scan.result }}" = "failure" ] ||
             [ "${{ needs.eslint-security.result }}" = "failure" ] ||
             [ "${{ needs.container-scan.result }}" = "failure" ]; then
            echo "üö® **Á∑äÊÄ•**: Ê§úÂá∫„Åï„Çå„ÅüËÑÜÂº±ÊÄß„Åæ„Åü„ÅØÂïèÈ°å„ÇíÁ¢∫Ë™ç„Åó„ÄÅ‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" >> security-summary.md
            echo "" >> security-summary.md
            echo "1. GitHub Security „Çø„Éñ„ÅßË©≥Á¥∞„ÇíÁ¢∫Ë™ç" >> security-summary.md
            echo "2. „Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„Éà„Åã„ÇâË©≥Á¥∞„É¨„Éù„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ" >> security-summary.md
            echo "3. ËÑÜÂº±ÊÄß„Çí‰øÆÊ≠£Âæå„ÄÅÂÜçÂÆüË°å" >> security-summary.md
          else
            echo "üéâ „Åô„Åπ„Å¶„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ" >> security-summary.md
          fi

          # „Çµ„Éû„É™„Éº„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥Â§±ÊïóÊôÇ„ÅÆÈÄöÁü•
  security-notification:
    name: Security Alert Notification
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secret-scan, eslint-security, container-scan]
    if: failure()

    steps:
      - name: Send Discord notification
        if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "üîí „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥Â§±Êïó",
                   "description": "CineCom„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„Çª„Ç≠„É•„É™„ÉÜ„Ç£‰∏ä„ÅÆÂïèÈ°å„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ",
                   "color": 15158332,
                   "fields": [
                     {
                       "name": "„É™„Éù„Ç∏„Éà„É™",
                       "value": "${{ github.repository }}",
                       "inline": true
                     },
                     {
                       "name": "„Éñ„É©„É≥„ÉÅ",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "ÂÆüË°åËÄÖ",
                       "value": "${{ github.actor }}",
                       "inline": true
                     },
                     {
                       "name": "Ë©≥Á¥∞",
                       "value": "[GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
                     }
                   ],
                   "timestamp": "${{ github.event.head_commit.timestamp }}"
                 }]
               }' \
               "${{ secrets.DISCORD_SECURITY_WEBHOOK_URL }}" || echo "Discord webhook not configured"
